
dispositivo_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080055a4  080055a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055a4  080055a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000234  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001038a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb7  00000000  00000000  000303ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2f9  00000000  00000000  00033d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104b5  00000000  00000000  00051039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b352f  00000000  00000000  000614ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114a1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003764  00000000  00000000  00114a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005554 	.word	0x08005554

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005554 	.word	0x08005554

080001c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a2c      	ldr	r2, [pc, #176]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d110      	bne.n	80001fa <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // alza Trigger
 80001d8:	2201      	movs	r2, #1
 80001da:	2102      	movs	r1, #2
 80001dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e0:	f001 f950 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim4);
 80001e4:	4828      	ldr	r0, [pc, #160]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001e6:	f002 fdf9 	bl	8002ddc <HAL_TIM_Base_Start_IT>

		HAL_TIM_Base_Stop_IT(&htim6);
 80001ea:	4826      	ldr	r0, [pc, #152]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001ec:	f002 fe60 	bl	8002eb0 <HAL_TIM_Base_Stop_IT>
		htim6.Instance->CNT = 0;
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2200      	movs	r2, #0
 80001f6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // abbassa Trigger

		HAL_TIM_Base_Stop_IT(&htim4);
		htim4.Instance->CNT = 0;
	}
}
 80001f8:	e03f      	b.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
	} else if(htim == &htim2) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a23      	ldr	r2, [pc, #140]	; (800028c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d12a      	bne.n	8000258 <HAL_TIM_PeriodElapsedCallback+0x90>
		HAL_TIM_Base_Start_IT(&htim6);
 8000202:	4820      	ldr	r0, [pc, #128]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000204:	f002 fdea 	bl	8002ddc <HAL_TIM_Base_Start_IT>
		if(direction == 0) {
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d111      	bne.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x6c>
			rotation += 5;
 8000210:	4b20      	ldr	r3, [pc, #128]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3305      	adds	r3, #5
 8000216:	4a1f      	ldr	r2, [pc, #124]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000218:	6013      	str	r3, [r2, #0]
			htim1.Instance->CCR1 = rotation;
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b1e      	ldr	r3, [pc, #120]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	635a      	str	r2, [r3, #52]	; 0x34
			if(rotation == 125) {
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b7d      	cmp	r3, #125	; 0x7d
 800022a:	d126      	bne.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
				direction = 1;
 800022c:	4b18      	ldr	r3, [pc, #96]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800022e:	2201      	movs	r2, #1
 8000230:	601a      	str	r2, [r3, #0]
}
 8000232:	e022      	b.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
			rotation -= 5;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3b05      	subs	r3, #5
 800023a:	4a16      	ldr	r2, [pc, #88]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800023c:	6013      	str	r3, [r2, #0]
			htim1.Instance->CCR1 = rotation;
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
			if(rotation == 25) {
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b19      	cmp	r3, #25
 800024e:	d114      	bne.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
				direction = 0;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
}
 8000256:	e010      	b.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
	} else if(htim == &htim4) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d10c      	bne.n	800027a <HAL_TIM_PeriodElapsedCallback+0xb2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // abbassa Trigger
 8000260:	2200      	movs	r2, #0
 8000262:	2102      	movs	r1, #2
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f001 f90c 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim4);
 800026c:	4806      	ldr	r0, [pc, #24]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800026e:	f002 fe1f 	bl	8002eb0 <HAL_TIM_Base_Stop_IT>
		htim4.Instance->CNT = 0;
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000015c 	.word	0x2000015c
 8000288:	20000110 	.word	0x20000110
 800028c:	20000078 	.word	0x20000078
 8000290:	20000230 	.word	0x20000230
 8000294:	20000000 	.word	0x20000000
 8000298:	2000002c 	.word	0x2000002c

0800029c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2) {
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	d138      	bne.n	800031e <HAL_GPIO_EXTI_Callback+0x82>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {	// rising-edge
 80002ac:	2104      	movs	r1, #4
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f001 f8cf 	bl	8001454 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d103      	bne.n	80002c4 <HAL_GPIO_EXTI_Callback+0x28>
			HAL_TIM_Base_Start_IT(&htim3);
 80002bc:	4828      	ldr	r0, [pc, #160]	; (8000360 <HAL_GPIO_EXTI_Callback+0xc4>)
 80002be:	f002 fd8d 	bl	8002ddc <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim2);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
			paused = 1;
		}
	}
}
 80002c2:	e048      	b.n	8000356 <HAL_GPIO_EXTI_Callback+0xba>
			HAL_TIM_Base_Stop_IT(&htim3);
 80002c4:	4826      	ldr	r0, [pc, #152]	; (8000360 <HAL_GPIO_EXTI_Callback+0xc4>)
 80002c6:	f002 fdf3 	bl	8002eb0 <HAL_TIM_Base_Stop_IT>
			if(htim3.Instance->CNT > 25000) {
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <HAL_GPIO_EXTI_Callback+0xc4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d904      	bls.n	80002e2 <HAL_GPIO_EXTI_Callback+0x46>
				distance = MAX_UINT_16;
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <HAL_GPIO_EXTI_Callback+0xc8>)
 80002da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	e009      	b.n	80002f6 <HAL_GPIO_EXTI_Callback+0x5a>
				distance = htim3.Instance->CNT / 58;
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <HAL_GPIO_EXTI_Callback+0xc4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e8:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <HAL_GPIO_EXTI_Callback+0xcc>)
 80002ea:	fba2 2303 	umull	r2, r3, r2, r3
 80002ee:	095b      	lsrs	r3, r3, #5
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <HAL_GPIO_EXTI_Callback+0xc8>)
 80002f4:	601a      	str	r2, [r3, #0]
			sendbuff[0] = distance;
 80002f6:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <HAL_GPIO_EXTI_Callback+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <HAL_GPIO_EXTI_Callback+0xd0>)
 80002fe:	801a      	strh	r2, [r3, #0]
			sendbuff[1] = rotation;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000308:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart4, (uint8_t *) sendbuff, sizeof(uint16_t) * DATA_SIZE);
 800030a:	2204      	movs	r2, #4
 800030c:	4917      	ldr	r1, [pc, #92]	; (800036c <HAL_GPIO_EXTI_Callback+0xd0>)
 800030e:	4819      	ldr	r0, [pc, #100]	; (8000374 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000310:	f004 f8aa 	bl	8004468 <HAL_UART_Transmit_IT>
			htim3.Instance->CNT = 0;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800031c:	e01b      	b.n	8000356 <HAL_GPIO_EXTI_Callback+0xba>
	} else if(GPIO_Pin == GPIO_PIN_0) {
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d118      	bne.n	8000356 <HAL_GPIO_EXTI_Callback+0xba>
		if(paused) {
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d00a      	beq.n	8000342 <HAL_GPIO_EXTI_Callback+0xa6>
			HAL_TIM_Base_Start_IT(&htim2);
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <HAL_GPIO_EXTI_Callback+0xe0>)
 800032e:	f002 fd55 	bl	8002ddc <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000332:	2100      	movs	r1, #0
 8000334:	4812      	ldr	r0, [pc, #72]	; (8000380 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000336:	f002 fe4b 	bl	8002fd0 <HAL_TIM_PWM_Start>
			paused = 0;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_GPIO_EXTI_Callback+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	e009      	b.n	8000356 <HAL_GPIO_EXTI_Callback+0xba>
			HAL_TIM_Base_Stop_IT(&htim2);
 8000342:	480e      	ldr	r0, [pc, #56]	; (800037c <HAL_GPIO_EXTI_Callback+0xe0>)
 8000344:	f002 fdb4 	bl	8002eb0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000348:	2100      	movs	r1, #0
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <HAL_GPIO_EXTI_Callback+0xe4>)
 800034c:	f002 ff40 	bl	80031d0 <HAL_TIM_PWM_Stop>
			paused = 1;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200000c4 	.word	0x200000c4
 8000364:	20000234 	.word	0x20000234
 8000368:	8d3dcb09 	.word	0x8d3dcb09
 800036c:	2000023c 	.word	0x2000023c
 8000370:	20000000 	.word	0x20000000
 8000374:	200001a8 	.word	0x200001a8
 8000378:	20000238 	.word	0x20000238
 800037c:	20000078 	.word	0x20000078
 8000380:	2000002c 	.word	0x2000002c

08000384 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	4803      	ldr	r0, [pc, #12]	; (80003a0 <HAL_UART_TxCpltCallback+0x1c>)
 8000394:	f001 f876 	bl	8001484 <HAL_GPIO_WritePin>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	48001000 	.word	0x48001000

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fcec 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f822 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 fa7a 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003b4:	f000 f878 	bl	80004a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003b8:	f000 f924 	bl	8000604 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003bc:	f000 f970 	bl	80006a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003c0:	f000 f9bc 	bl	800073c <MX_TIM4_Init>
  MX_TIM6_Init();
 80003c4:	f000 fa08 	bl	80007d8 <MX_TIM6_Init>
  MX_UART4_Init();
 80003c8:	f000 fa3e 	bl	8000848 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003cc:	4806      	ldr	r0, [pc, #24]	; (80003e8 <main+0x44>)
 80003ce:	f002 fd05 	bl	8002ddc <HAL_TIM_Base_Start_IT>

  htim1.Instance->CCR1 = rotation;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <main+0x48>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <main+0x4c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4804      	ldr	r0, [pc, #16]	; (80003f0 <main+0x4c>)
 80003e0:	f002 fdf6 	bl	8002fd0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <main+0x40>
 80003e6:	bf00      	nop
 80003e8:	20000078 	.word	0x20000078
 80003ec:	20000000 	.word	0x20000000
 80003f0:	2000002c 	.word	0x2000002c

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b09e      	sub	sp, #120	; 0x78
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003fe:	2228      	movs	r2, #40	; 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f005 f89e 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	223c      	movs	r2, #60	; 0x3c
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f005 f890 	bl	8005544 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2310      	movs	r3, #16
 800042e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000434:	2300      	movs	r3, #0
 8000436:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000438:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800043c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000442:	4618      	mov	r0, r3
 8000444:	f001 f84e 	bl	80014e4 <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800044e:	f000 fab9 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	230f      	movs	r3, #15
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	2302      	movs	r3, #2
 8000458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800045e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f002 f876 	bl	8002560 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800047a:	f000 faa3 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_TIM1;
 800047e:	f241 0308 	movw	r3, #4104	; 0x1008
 8000482:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000488:	2300      	movs	r3, #0
 800048a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048c:	463b      	mov	r3, r7
 800048e:	4618      	mov	r0, r3
 8000490:	f002 fa9c 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800049a:	f000 fa93 	bl	80009c4 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3778      	adds	r7, #120	; 0x78
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09a      	sub	sp, #104	; 0x68
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	222c      	movs	r2, #44	; 0x2c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 f82e 	bl	8005544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e8:	4b44      	ldr	r3, [pc, #272]	; (80005fc <MX_TIM1_Init+0x154>)
 80004ea:	4a45      	ldr	r2, [pc, #276]	; (8000600 <MX_TIM1_Init+0x158>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <MX_TIM1_Init+0x154>)
 80004f0:	f240 123f 	movw	r2, #319	; 0x13f
 80004f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b41      	ldr	r3, [pc, #260]	; (80005fc <MX_TIM1_Init+0x154>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80004fc:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <MX_TIM1_Init+0x154>)
 80004fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <MX_TIM1_Init+0x154>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800050a:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <MX_TIM1_Init+0x154>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <MX_TIM1_Init+0x154>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000516:	4839      	ldr	r0, [pc, #228]	; (80005fc <MX_TIM1_Init+0x154>)
 8000518:	f002 fc08 	bl	8002d2c <HAL_TIM_Base_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000522:	f000 fa4f 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800052c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000530:	4619      	mov	r1, r3
 8000532:	4832      	ldr	r0, [pc, #200]	; (80005fc <MX_TIM1_Init+0x154>)
 8000534:	f003 f916 	bl	8003764 <HAL_TIM_ConfigClockSource>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800053e:	f000 fa41 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000542:	482e      	ldr	r0, [pc, #184]	; (80005fc <MX_TIM1_Init+0x154>)
 8000544:	f002 fce3 	bl	8002f0e <HAL_TIM_PWM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800054e:	f000 fa39 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000562:	4619      	mov	r1, r3
 8000564:	4825      	ldr	r0, [pc, #148]	; (80005fc <MX_TIM1_Init+0x154>)
 8000566:	f003 fe15 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000570:	f000 fa28 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057c:	2300      	movs	r3, #0
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <MX_TIM1_Init+0x154>)
 800059a:	f002 ffcf 	bl	800353c <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80005a4:	f000 fa0e 	bl	80009c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <MX_TIM1_Init+0x154>)
 80005de:	f003 fe59 	bl	8004294 <HAL_TIMEx_ConfigBreakDeadTime>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80005e8:	f000 f9ec 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <MX_TIM1_Init+0x154>)
 80005ee:	f000 fa9f 	bl	8000b30 <HAL_TIM_MspPostInit>

}
 80005f2:	bf00      	nop
 80005f4:	3768      	adds	r7, #104	; 0x68
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	40012c00 	.word	0x40012c00

08000604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_TIM2_Init+0x98>)
 8000624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000628:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_TIM2_Init+0x98>)
 800062c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM2_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM2_Init+0x98>)
 800063a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800063e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_TIM2_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_TIM2_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <MX_TIM2_Init+0x98>)
 800064e:	f002 fb6d 	bl	8002d2c <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000658:	f000 f9b4 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_TIM2_Init+0x98>)
 800066a:	f003 f87b 	bl	8003764 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000674:	f000 f9a6 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM2_Init+0x98>)
 8000686:	f003 fd85 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000690:	f000 f998 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000078 	.word	0x20000078

080006a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM3_Init+0x94>)
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <MX_TIM3_Init+0x98>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_TIM3_Init+0x94>)
 80006c6:	2207      	movs	r2, #7
 80006c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_TIM3_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_TIM3_Init+0x94>)
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_TIM3_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_TIM3_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e4:	4813      	ldr	r0, [pc, #76]	; (8000734 <MX_TIM3_Init+0x94>)
 80006e6:	f002 fb21 	bl	8002d2c <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006f0:	f000 f968 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_TIM3_Init+0x94>)
 8000702:	f003 f82f 	bl	8003764 <HAL_TIM_ConfigClockSource>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 f95a 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_TIM3_Init+0x94>)
 800071e:	f003 fd39 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 f94c 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000c4 	.word	0x200000c4
 8000738:	40000400 	.word	0x40000400

0800073c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_TIM4_Init+0x94>)
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_TIM4_Init+0x98>)
 800075e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_TIM4_Init+0x94>)
 8000762:	2207      	movs	r2, #7
 8000764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_TIM4_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 15-1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_TIM4_Init+0x94>)
 800076e:	220e      	movs	r2, #14
 8000770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_TIM4_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM4_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <MX_TIM4_Init+0x94>)
 8000780:	f002 fad4 	bl	8002d2c <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f91b 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_TIM4_Init+0x94>)
 800079c:	f002 ffe2 	bl	8003764 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f90d 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_TIM4_Init+0x94>)
 80007b8:	f003 fcec 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f8ff 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000110 	.word	0x20000110
 80007d4:	40000800 	.word	0x40000800

080007d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM6_Init+0x68>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_TIM6_Init+0x6c>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_TIM6_Init+0x68>)
 80007f0:	f240 321f 	movw	r2, #799	; 0x31f
 80007f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_TIM6_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_TIM6_Init+0x68>)
 80007fe:	f240 128f 	movw	r2, #399	; 0x18f
 8000802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_TIM6_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_TIM6_Init+0x68>)
 800080c:	f002 fa8e 	bl	8002d2c <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000816:	f000 f8d5 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_TIM6_Init+0x68>)
 8000828:	f003 fcb4 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 f8c7 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000015c 	.word	0x2000015c
 8000844:	40001000 	.word	0x40001000

08000848 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_UART4_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_UART4_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_UART4_Init+0x58>)
 8000854:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000858:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_UART4_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_UART4_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_UART4_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_UART4_Init+0x58>)
 800086e:	2208      	movs	r2, #8
 8000870:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_UART4_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_UART4_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_UART4_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_UART4_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_UART4_Init+0x58>)
 800088c:	f003 fd9e 	bl	80043cc <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f895 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001a8 	.word	0x200001a8
 80008a4:	40004c00 	.word	0x40004c00

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_GPIO_Init+0x114>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a3e      	ldr	r2, [pc, #248]	; (80009bc <MX_GPIO_Init+0x114>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <MX_GPIO_Init+0x114>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MX_GPIO_Init+0x114>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a38      	ldr	r2, [pc, #224]	; (80009bc <MX_GPIO_Init+0x114>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <MX_GPIO_Init+0x114>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_GPIO_Init+0x114>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a32      	ldr	r2, [pc, #200]	; (80009bc <MX_GPIO_Init+0x114>)
 80008f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x114>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 fdb9 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x118>)
 800091a:	f000 fdb3 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fc13 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800093a:	2302      	movs	r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fc04 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000958:	2304      	movs	r3, #4
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800095c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fbf6 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0x118>)
 800098e:	f000 fbe7 	bl	8001160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2006      	movs	r0, #6
 8000998:	f000 fb35 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099c:	2006      	movs	r0, #6
 800099e:	f000 fb4e 	bl	800103e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	2008      	movs	r0, #8
 80009a8:	f000 fb2d 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80009ac:	2008      	movs	r0, #8
 80009ae:	f000 fb46 	bl	800103e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	48001000 	.word	0x48001000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <HAL_TIM_Base_MspInit+0x104>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d114      	bne.n	8000a54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a3c      	ldr	r2, [pc, #240]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2019      	movs	r0, #25
 8000a48:	f000 fadd 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f000 faf6 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a52:	e05e      	b.n	8000b12 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d114      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 fac3 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 fadc 	bl	800103e <HAL_NVIC_EnableIRQ>
}
 8000a86:	e044      	b.n	8000b12 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_TIM_Base_MspInit+0x10c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10c      	bne.n	8000aac <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
}
 8000aaa:	e032      	b.n	8000b12 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_TIM_Base_MspInit+0x110>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d114      	bne.n	8000ae0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	201e      	movs	r0, #30
 8000ad4:	f000 fa97 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ad8:	201e      	movs	r0, #30
 8000ada:	f000 fab0 	bl	800103e <HAL_NVIC_EnableIRQ>
}
 8000ade:	e018      	b.n	8000b12 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_TIM_Base_MspInit+0x114>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d113      	bne.n	8000b12 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_TIM_Base_MspInit+0x108>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2036      	movs	r0, #54	; 0x36
 8000b08:	f000 fa7d 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b0c:	2036      	movs	r0, #54	; 0x36
 8000b0e:	f000 fa96 	bl	800103e <HAL_NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40012c00 	.word	0x40012c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40000800 	.word	0x40000800
 8000b2c:	40001000 	.word	0x40001000

08000b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_TIM_MspPostInit+0x68>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d11d      	bne.n	8000b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_TIM_MspPostInit+0x6c>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <HAL_TIM_MspPostInit+0x6c>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_TIM_MspPostInit+0x6c>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 fae9 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_UART_MspInit+0x8c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d130      	bne.n	8000c24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000c10:	f000 faa6 	bl	8001160 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2034      	movs	r0, #52	; 0x34
 8000c1a:	f000 f9f4 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c1e:	2034      	movs	r0, #52	; 0x34
 8000c20:	f000 fa0d 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004c00 	.word	0x40004c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8c4 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fc0f 	bl	80014b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c9e:	2004      	movs	r0, #4
 8000ca0:	f000 fc08 	bl	80014b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cae:	f002 fb25 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000002c 	.word	0x2000002c

08000cbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM2_IRQHandler+0x10>)
 8000cc2:	f002 fb1b 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000078 	.word	0x20000078

08000cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM4_IRQHandler+0x10>)
 8000cd6:	f002 fb11 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000110 	.word	0x20000110

08000ce4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <UART4_IRQHandler+0x10>)
 8000cea:	f003 fc1b 	bl	8004524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001a8 	.word	0x200001a8

08000cf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM6_DAC_IRQHandler+0x10>)
 8000cfe:	f002 fafd 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000015c 	.word	0x2000015c

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f004 fbcd 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fb1f 	bl	80003a4 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d74:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 8000d78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d7c:	20000244 	.word	0x20000244

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f92b 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fe16 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f943 	bl	800105a <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f90b 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000004 	.word	0x20000004
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	20000240 	.word	0x20000240

08000e38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000240 	.word	0x20000240

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001080:	2b02      	cmp	r3, #2
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2204      	movs	r2, #4
 8001088:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e020      	b.n	80010d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020e 	bic.w	r2, r2, #14
 80010a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d005      	beq.n	8001106 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2204      	movs	r2, #4
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e027      	b.n	8001156 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    } 
  }
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e154      	b.n	800141a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8146 	beq.w	8001414 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_GPIO_Init+0x40>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d017      	beq.n	800123e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a0 	beq.w	8001414 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x2d8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_GPIO_Init+0x2d8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_GPIO_Init+0x2d8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ec:	4a53      	ldr	r2, [pc, #332]	; (800143c <HAL_GPIO_Init+0x2dc>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001316:	d019      	beq.n	800134c <HAL_GPIO_Init+0x1ec>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a49      	ldr	r2, [pc, #292]	; (8001440 <HAL_GPIO_Init+0x2e0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <HAL_GPIO_Init+0x1e8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a48      	ldr	r2, [pc, #288]	; (8001444 <HAL_GPIO_Init+0x2e4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00d      	beq.n	8001344 <HAL_GPIO_Init+0x1e4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a47      	ldr	r2, [pc, #284]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d007      	beq.n	8001340 <HAL_GPIO_Init+0x1e0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a46      	ldr	r2, [pc, #280]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_GPIO_Init+0x1dc>
 8001338:	2304      	movs	r3, #4
 800133a:	e008      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 800133c:	2305      	movs	r3, #5
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001340:	2303      	movs	r3, #3
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	4937      	ldr	r1, [pc, #220]	; (800143c <HAL_GPIO_Init+0x2dc>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f aea3 	bne.w	8001170 <HAL_GPIO_Init+0x10>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	48001000 	.word	0x48001000
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fee2 	bl	800029c <HAL_GPIO_EXTI_Callback>
  }
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	f001 b823 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 817d 	beq.w	800181a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001520:	4bbc      	ldr	r3, [pc, #752]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d00c      	beq.n	8001546 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800152c:	4bb9      	ldr	r3, [pc, #740]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d15c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x10e>
 8001538:	4bb6      	ldr	r3, [pc, #728]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d155      	bne.n	80015f2 <HAL_RCC_OscConfig+0x10e>
 8001546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800155a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <HAL_RCC_OscConfig+0x94>
 8001572:	4ba8      	ldr	r3, [pc, #672]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e015      	b.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 8001578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800158c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001590:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001594:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015a0:	4b9c      	ldr	r3, [pc, #624]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015b0:	fa92 f2a2 	rbit	r2, r2
 80015b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015bc:	fab2 f282 	clz	r2, r2
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f002 021f 	and.w	r2, r2, #31
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 811f 	beq.w	8001818 <HAL_RCC_OscConfig+0x334>
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8116 	bne.w	8001818 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f000 bfaf 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x12e>
 8001604:	4b83      	ldr	r3, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a82      	ldr	r2, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e036      	b.n	8001680 <HAL_RCC_OscConfig+0x19c>
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x158>
 8001622:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b79      	ldr	r3, [pc, #484]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a78      	ldr	r2, [pc, #480]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e021      	b.n	8001680 <HAL_RCC_OscConfig+0x19c>
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x184>
 800164e:	4b71      	ldr	r3, [pc, #452]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a70      	ldr	r2, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b6e      	ldr	r3, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6d      	ldr	r2, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x19c>
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a69      	ldr	r2, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f023 020f 	bic.w	r2, r3, #15
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	495f      	ldr	r1, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001696:	4313      	orrs	r3, r2
 8001698:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d059      	beq.n	800175e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fbc5 	bl	8000e38 <HAL_GetTick>
 80016ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fbc0 	bl	8000e38 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d902      	bls.n	80016ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f000 bf43 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 80016ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x218>
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e015      	b.n	8001728 <HAL_RCC_OscConfig+0x244>
 80016fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001700:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001718:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001730:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800173c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ab      	beq.n	80016b4 <HAL_RCC_OscConfig+0x1d0>
 800175c:	e05d      	b.n	800181a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fb6b 	bl	8000e38 <HAL_GetTick>
 8001762:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb66 	bl	8000e38 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d902      	bls.n	800177e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	f000 bee9 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 800177e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001782:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001792:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2cc>
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e015      	b.n	80017dc <HAL_RCC_OscConfig+0x2f8>
 80017b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_RCC_OscConfig+0x330>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017e8:	fa92 f2a2 	rbit	r2, r2
 80017ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f002 021f 	and.w	r2, r2, #31
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ab      	bne.n	8001768 <HAL_RCC_OscConfig+0x284>
 8001810:	e003      	b.n	800181a <HAL_RCC_OscConfig+0x336>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 817d 	beq.w	8001b2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001830:	4ba6      	ldr	r3, [pc, #664]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183c:	4ba3      	ldr	r3, [pc, #652]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d172      	bne.n	800192e <HAL_RCC_OscConfig+0x44a>
 8001848:	4ba0      	ldr	r3, [pc, #640]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d16c      	bne.n	800192e <HAL_RCC_OscConfig+0x44a>
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001866:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x3a0>
 800187e:	4b93      	ldr	r3, [pc, #588]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	e013      	b.n	80018ac <HAL_RCC_OscConfig+0x3c8>
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800189c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018a8:	4b88      	ldr	r3, [pc, #544]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	2202      	movs	r2, #2
 80018ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018b6:	fa92 f2a2 	rbit	r2, r2
 80018ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018c2:	fab2 f282 	clz	r2, r2
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f002 021f 	and.w	r2, r2, #31
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <HAL_RCC_OscConfig+0x410>
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f000 be2e 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b75      	ldr	r3, [pc, #468]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	21f8      	movs	r1, #248	; 0xf8
 800190a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001912:	fa91 f1a1 	rbit	r1, r1
 8001916:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800191a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800191e:	fab1 f181 	clz	r1, r1
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	408b      	lsls	r3, r1
 8001926:	4969      	ldr	r1, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192c:	e0fd      	b.n	8001b2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8088 	beq.w	8001a50 <HAL_RCC_OscConfig+0x56c>
 8001940:	2301      	movs	r3, #1
 8001942:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001952:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	2301      	movs	r3, #1
 800196a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fa64 	bl	8000e38 <HAL_GetTick>
 8001970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fa5f 	bl	8000e38 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d902      	bls.n	800198c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	f000 bde2 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800199e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x4d8>
 80019b6:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x500>
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2202      	movs	r2, #2
 80019e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019ee:	fa92 f2a2 	rbit	r2, r2
 80019f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019fa:	fab2 f282 	clz	r2, r2
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	f042 0220 	orr.w	r2, r2, #32
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f002 021f 	and.w	r2, r2, #31
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0af      	beq.n	8001976 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	21f8      	movs	r1, #248	; 0xf8
 8001a2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a34:	fa91 f1a1 	rbit	r1, r1
 8001a38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a40:	fab1 f181 	clz	r1, r1
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	408b      	lsls	r3, r1
 8001a48:	4920      	ldr	r1, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
 8001a4e:	e06c      	b.n	8001b2a <HAL_RCC_OscConfig+0x646>
 8001a50:	2301      	movs	r3, #1
 8001a52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	461a      	mov	r2, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f9dc 	bl	8000e38 <HAL_GetTick>
 8001a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f9d7 	bl	8000e38 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d902      	bls.n	8001a9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f000 bd5a 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d104      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5ec>
 8001ac6:	4b01      	ldr	r3, [pc, #4]	; (8001acc <HAL_RCC_OscConfig+0x5e8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e015      	b.n	8001af8 <HAL_RCC_OscConfig+0x614>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ae8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001af4:	4bc8      	ldr	r3, [pc, #800]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2202      	movs	r2, #2
 8001afa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001afe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b02:	fa92 f2a2 	rbit	r2, r2
 8001b06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f002 021f 	and.w	r2, r2, #31
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ad      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8110 	beq.w	8001d60 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d079      	beq.n	8001c44 <HAL_RCC_OscConfig+0x760>
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4bab      	ldr	r3, [pc, #684]	; (8001e1c <HAL_RCC_OscConfig+0x938>)
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	461a      	mov	r2, r3
 8001b76:	2301      	movs	r3, #1
 8001b78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f95d 	bl	8000e38 <HAL_GetTick>
 8001b7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff f958 	bl	8000e38 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d902      	bls.n	8001b9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f000 bcdb 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bd8:	2202      	movs	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bf2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c00:	2102      	movs	r1, #2
 8001c02:	6019      	str	r1, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f1a3 	rbit	r1, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c1a:	6019      	str	r1, [r3, #0]
  return result;
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0a0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x6a0>
 8001c42:	e08d      	b.n	8001d60 <HAL_RCC_OscConfig+0x87c>
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x938>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2300      	movs	r3, #0
 8001c84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7ff f8d7 	bl	8000e38 <HAL_GetTick>
 8001c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff f8d2 	bl	8000e38 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bc55 	b.w	8002550 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cae:	2202      	movs	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d1e:	2102      	movs	r1, #2
 8001d20:	6019      	str	r1, [r3, #0]
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f1a3 	rbit	r1, r3
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d38:	6019      	str	r1, [r3, #0]
  return result;
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d197      	bne.n	8001c90 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 81a1 	beq.w	80020b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d116      	bne.n	8001db6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	61d3      	str	r3, [r2, #28]
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_RCC_OscConfig+0x93c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11a      	bne.n	8001df8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_RCC_OscConfig+0x93c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x93c>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7ff f833 	bl	8000e38 <HAL_GetTick>
 8001dd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd8:	f7ff f82e 	bl	8000e38 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	; 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e3b1      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x93c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ef      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10d      	bne.n	8001e24 <HAL_RCC_OscConfig+0x940>
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a02      	ldr	r2, [pc, #8]	; (8001e18 <HAL_RCC_OscConfig+0x934>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e03c      	b.n	8001e90 <HAL_RCC_OscConfig+0x9ac>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	10908120 	.word	0x10908120
 8001e20:	40007000 	.word	0x40007000
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x96a>
 8001e34:	4bc1      	ldr	r3, [pc, #772]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4ac0      	ldr	r2, [pc, #768]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	4bbe      	ldr	r3, [pc, #760]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4abd      	ldr	r2, [pc, #756]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e020      	b.n	8001e90 <HAL_RCC_OscConfig+0x9ac>
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x994>
 8001e5e:	4bb7      	ldr	r3, [pc, #732]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4ab6      	ldr	r2, [pc, #728]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4bb4      	ldr	r3, [pc, #720]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4ab3      	ldr	r2, [pc, #716]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x9ac>
 8001e78:	4bb0      	ldr	r3, [pc, #704]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4aaf      	ldr	r2, [pc, #700]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4bad      	ldr	r3, [pc, #692]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4aac      	ldr	r2, [pc, #688]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001e8a:	f023 0304 	bic.w	r3, r3, #4
 8001e8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8081 	beq.w	8001fa4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe ffc9 	bl	8000e38 <HAL_GetTick>
 8001ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe ffc4 	bl	8000e38 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e345      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ecc:	2202      	movs	r2, #2
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f0a:	601a      	str	r2, [r3, #0]
  return result;
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0xa4c>
 8001f2a:	4b84      	ldr	r3, [pc, #528]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0xa74>
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b79      	ldr	r3, [pc, #484]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f60:	2102      	movs	r1, #2
 8001f62:	6011      	str	r1, [r2, #0]
 8001f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	fa92 f1a2 	rbit	r1, r2
 8001f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f7a:	6011      	str	r1, [r2, #0]
  return result;
 8001f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f80:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d084      	beq.n	8001eac <HAL_RCC_OscConfig+0x9c8>
 8001fa2:	e07f      	b.n	80020a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff48 	bl	8000e38 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe ff43 	bl	8000e38 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e2c4      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001fce:	2202      	movs	r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002016:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0xb4e>
 800202c:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	e013      	b.n	800205a <HAL_RCC_OscConfig+0xb76>
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800203a:	2202      	movs	r2, #2
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	fa93 f2a3 	rbit	r2, r3
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002062:	2102      	movs	r1, #2
 8002064:	6011      	str	r1, [r2, #0]
 8002066:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800206a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	fa92 f1a2 	rbit	r1, r2
 8002074:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002078:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800207c:	6011      	str	r1, [r2, #0]
  return result;
 800207e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002082:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f002 021f 	and.w	r2, r2, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f202 	lsl.w	r2, r1, r2
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d184      	bne.n	8001fae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8242 	beq.w	800254e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0xc58>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	f000 8213 	beq.w	80024fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	f040 8162 	bne.w	80023ae <HAL_RCC_OscConfig+0xeca>
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80020f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800210e:	601a      	str	r2, [r3, #0]
  return result;
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002118:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002124:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	461a      	mov	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fe82 	bl	8000e38 <HAL_GetTick>
 8002134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	e00c      	b.n	8002154 <HAL_RCC_OscConfig+0xc70>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fe7a 	bl	8000e38 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1fd      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002182:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0xcba>
 8002198:	4bb0      	ldr	r3, [pc, #704]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	e027      	b.n	80021ee <HAL_RCC_OscConfig+0xd0a>
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	4b9c      	ldr	r3, [pc, #624]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80021f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021fa:	6011      	str	r1, [r2, #0]
 80021fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002200:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	fa92 f1a2 	rbit	r1, r2
 800220a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800220e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002212:	6011      	str	r1, [r2, #0]
  return result;
 8002214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002218:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d182      	bne.n	8002140 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	430b      	orrs	r3, r1
 800225c:	497f      	ldr	r1, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800226a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002286:	601a      	str	r2, [r3, #0]
  return result;
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002290:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800229c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fdc6 	bl	8000e38 <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	e009      	b.n	80022c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fdc1 	bl	8000e38 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e144      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022ea:	601a      	str	r2, [r3, #0]
  return result;
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0xe2c>
 800230a:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e027      	b.n	8002360 <HAL_RCC_OscConfig+0xe7c>
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002364:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002368:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002372:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fa92 f1a2 	rbit	r1, r2
 800237c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002380:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002384:	6011      	str	r1, [r2, #0]
  return result;
 8002386:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d082      	beq.n	80022b2 <HAL_RCC_OscConfig+0xdce>
 80023ac:	e0cf      	b.n	800254e <HAL_RCC_OscConfig+0x106a>
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023d2:	601a      	str	r2, [r3, #0]
  return result;
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	461a      	mov	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fd20 	bl	8000e38 <HAL_GetTick>
 80023f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	e009      	b.n	8002412 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fd1b 	bl	8000e38 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e09e      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800241a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002436:	601a      	str	r2, [r3, #0]
  return result;
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002440:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d104      	bne.n	8002460 <HAL_RCC_OscConfig+0xf7c>
 8002456:	4b01      	ldr	r3, [pc, #4]	; (800245c <HAL_RCC_OscConfig+0xf78>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e029      	b.n	80024b0 <HAL_RCC_OscConfig+0xfcc>
 800245c:	40021000 	.word	0x40021000
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800248e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f2a3 	rbit	r2, r3
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_OscConfig+0x1078>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024bc:	6011      	str	r1, [r2, #0]
 80024be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	fa92 f1a2 	rbit	r1, r2
 80024cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024d4:	6011      	str	r1, [r2, #0]
  return result;
 80024d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f042 0220 	orr.w	r2, r2, #32
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f002 021f 	and.w	r2, r2, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d180      	bne.n	80023fe <HAL_RCC_OscConfig+0xf1a>
 80024fc:	e027      	b.n	800254e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e01e      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_OscConfig+0x1078>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800251a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800251e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	429a      	cmp	r2, r3
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002532:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b09e      	sub	sp, #120	; 0x78
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e162      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b90      	ldr	r3, [pc, #576]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d910      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	498b      	ldr	r1, [pc, #556]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e14a      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	497f      	ldr	r1, [pc, #508]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80dc 	beq.w	800278c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d13c      	bne.n	8002656 <HAL_RCC_ClockConfig+0xf6>
 80025dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_ClockConfig+0xa6>
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e00f      	b.n	8002626 <HAL_RCC_ClockConfig+0xc6>
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	667b      	str	r3, [r7, #100]	; 0x64
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	663b      	str	r3, [r7, #96]	; 0x60
 800261a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800262a:	65ba      	str	r2, [r7, #88]	; 0x58
 800262c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d17b      	bne.n	800274a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0f3      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d13c      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x178>
 800265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_RCC_ClockConfig+0x128>
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e00f      	b.n	80026a8 <HAL_RCC_ClockConfig+0x148>
 8002688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
 800269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a4:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b0:	fa92 f2a2 	rbit	r2, r2
 80026b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d13a      	bne.n	800274a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b2      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
 80026d8:	2302      	movs	r3, #2
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1a0>
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e00d      	b.n	800271c <HAL_RCC_ClockConfig+0x1bc>
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	2302      	movs	r3, #2
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2202      	movs	r2, #2
 800271e:	61ba      	str	r2, [r7, #24]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	617a      	str	r2, [r7, #20]
  return result;
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f042 0220 	orr.w	r2, r2, #32
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f002 021f 	and.w	r2, r2, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e079      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	491a      	ldr	r1, [pc, #104]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7fe fb6c 	bl	8000e38 <HAL_GetTick>
 8002760:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fb68 	bl	8000e38 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e061      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x260>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d214      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4906      	ldr	r1, [pc, #24]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCC_ClockConfig+0x25c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e040      	b.n	800283e <HAL_RCC_ClockConfig+0x2de>
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCC_ClockConfig+0x2e8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	491a      	ldr	r1, [pc, #104]	; (8002848 <HAL_RCC_ClockConfig+0x2e8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x2e8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4912      	ldr	r1, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x2e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002802:	f000 f829 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002806:	4601      	mov	r1, r0
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_RCC_ClockConfig+0x2e8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002810:	22f0      	movs	r2, #240	; 0xf0
 8002812:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	fa92 f2a2 	rbit	r2, r2
 800281a:	60fa      	str	r2, [r7, #12]
  return result;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	40d3      	lsrs	r3, r2
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x2ec>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	fa21 f303 	lsr.w	r3, r1, r3
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <HAL_RCC_ClockConfig+0x2f0>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCC_ClockConfig+0x2f4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe faba 	bl	8000db0 <HAL_InitTick>
  
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3778      	adds	r7, #120	; 0x78
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	0800556c 	.word	0x0800556c
 8002850:	20000004 	.word	0x20000004
 8002854:	20000008 	.word	0x20000008

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x30>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x36>
 8002886:	e03c      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_RCC_GetSysClockFreq+0xc4>)
 800288a:	623b      	str	r3, [r7, #32]
      break;
 800288c:	e03c      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002894:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002898:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	607a      	str	r2, [r7, #4]
  return result;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	40d3      	lsrs	r3, r2
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	220f      	movs	r2, #15
 80028bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	60fa      	str	r2, [r7, #12]
  return result;
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	fab2 f282 	clz	r2, r2
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	40d3      	lsrs	r3, r2
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	e004      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	623b      	str	r3, [r7, #32]
      break;
 8002900:	e002      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002904:	623b      	str	r3, [r7, #32]
      break;
 8002906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002908:	6a3b      	ldr	r3, [r7, #32]
}
 800290a:	4618      	mov	r0, r3
 800290c:	372c      	adds	r7, #44	; 0x2c
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	08005584 	.word	0x08005584
 8002924:	08005594 	.word	0x08005594
 8002928:	003d0900 	.word	0x003d0900

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_RCC_GetHCLKFreq+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800294a:	f7ff ffef 	bl	800292c <HAL_RCC_GetHCLKFreq>
 800294e:	4601      	mov	r1, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002958:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800295c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fa92 f2a2 	rbit	r2, r2
 8002964:	603a      	str	r2, [r7, #0]
  return result;
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	40d3      	lsrs	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	0800557c 	.word	0x0800557c

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800298e:	f7ff ffcd 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002992:	4601      	mov	r1, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800299c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	603a      	str	r2, [r7, #0]
  return result;
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	40d3      	lsrs	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	0800557c 	.word	0x0800557c

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b092      	sub	sp, #72	; 0x48
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80d4 	beq.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f0:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10e      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fa01 	bl	8000e38 <HAL_GetTick>
 8002a36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe f9fd 	bl	8000e38 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e169      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8084 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d07c      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aca:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04b      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe f9ad 	bl	8000e38 <HAL_GetTick>
 8002ade:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe f9a9 	bl	8000e38 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e113      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002af8:	2302      	movs	r3, #2
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	2302      	movs	r3, #2
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d108      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b26:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	e00d      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
 8002b34:	10908100 	.word	0x10908100
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	4b78      	ldr	r3, [pc, #480]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2202      	movs	r2, #2
 8002b4a:	613a      	str	r2, [r7, #16]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	60fa      	str	r2, [r7, #12]
  return result;
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0b7      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b72:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	496a      	ldr	r1, [pc, #424]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba4:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f023 0203 	bic.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	495d      	ldr	r1, [pc, #372]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc2:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4956      	ldr	r1, [pc, #344]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	494e      	ldr	r1, [pc, #312]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f023 0210 	bic.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4947      	ldr	r1, [pc, #284]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c1c:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	493f      	ldr	r1, [pc, #252]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f023 0220 	bic.w	r2, r3, #32
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4938      	ldr	r1, [pc, #224]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	4930      	ldr	r1, [pc, #192]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	4929      	ldr	r1, [pc, #164]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4921      	ldr	r1, [pc, #132]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	491a      	ldr	r1, [pc, #104]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	4912      	ldr	r1, [pc, #72]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	490b      	ldr	r1, [pc, #44]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3748      	adds	r7, #72	; 0x48
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e049      	b.n	8002dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fe60 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fdec 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04a      	b.n	8002e8a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x6c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1e:	d013      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x6c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_TIM_Base_Start_IT+0xc0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x6c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x6c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x6c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d115      	bne.n	8002e74 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_TIM_Base_Start_IT+0xd0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d015      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0xaa>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d011      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e72:	e008      	b.n	8002e86 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e000      	b.n	8002e88 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40013400 	.word	0x40013400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	00010007 	.word	0x00010007

08002eb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	f240 4344 	movw	r3, #1092	; 0x444
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e049      	b.n	8002fb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f841 	bl	8002fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f000 fcfb 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_TIM_PWM_Start+0x24>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e03c      	b.n	800306e <HAL_TIM_PWM_Start+0x9e>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d109      	bne.n	800300e <HAL_TIM_PWM_Start+0x3e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e02f      	b.n	800306e <HAL_TIM_PWM_Start+0x9e>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d109      	bne.n	8003028 <HAL_TIM_PWM_Start+0x58>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e022      	b.n	800306e <HAL_TIM_PWM_Start+0x9e>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d109      	bne.n	8003042 <HAL_TIM_PWM_Start+0x72>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e015      	b.n	800306e <HAL_TIM_PWM_Start+0x9e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d109      	bne.n	800305c <HAL_TIM_PWM_Start+0x8c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e008      	b.n	800306e <HAL_TIM_PWM_Start+0x9e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e097      	b.n	80031a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start+0xb6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	e023      	b.n	80030ce <HAL_TIM_PWM_Start+0xfe>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Start+0xc6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003094:	e01b      	b.n	80030ce <HAL_TIM_PWM_Start+0xfe>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0xd6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	e013      	b.n	80030ce <HAL_TIM_PWM_Start+0xfe>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start+0xe6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b4:	e00b      	b.n	80030ce <HAL_TIM_PWM_Start+0xfe>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_PWM_Start+0xf6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c4:	e003      	b.n	80030ce <HAL_TIM_PWM_Start+0xfe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f836 	bl	8004148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <HAL_TIM_PWM_Start+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIM_PWM_Start+0x13e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a32      	ldr	r2, [pc, #200]	; (80031b4 <HAL_TIM_PWM_Start+0x1e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIM_PWM_Start+0x13e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_TIM_PWM_Start+0x1e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIM_PWM_Start+0x13e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <HAL_TIM_PWM_Start+0x1ec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIM_PWM_Start+0x13e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2d      	ldr	r2, [pc, #180]	; (80031c0 <HAL_TIM_PWM_Start+0x1f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_TIM_PWM_Start+0x142>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_TIM_PWM_Start+0x144>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <HAL_TIM_PWM_Start+0x1e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_TIM_PWM_Start+0x194>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d013      	beq.n	8003164 <HAL_TIM_PWM_Start+0x194>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_PWM_Start+0x194>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_TIM_PWM_Start+0x1f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_PWM_Start+0x194>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_TIM_PWM_Start+0x1e4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_PWM_Start+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_TIM_PWM_Start+0x1e8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d115      	bne.n	8003190 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_TIM_PWM_Start+0x1fc>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d015      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x1d2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d011      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	e008      	b.n	80031a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40013400 	.word	0x40013400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	00010007 	.word	0x00010007

080031d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 ffb0 	bl	8004148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3e      	ldr	r2, [pc, #248]	; (80032e8 <HAL_TIM_PWM_Stop+0x118>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIM_PWM_Stop+0x4a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3d      	ldr	r2, [pc, #244]	; (80032ec <HAL_TIM_PWM_Stop+0x11c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIM_PWM_Stop+0x4a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <HAL_TIM_PWM_Stop+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIM_PWM_Stop+0x4a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_TIM_PWM_Stop+0x124>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_PWM_Stop+0x4a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_TIM_PWM_Stop+0x128>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_Stop+0x4e>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_TIM_PWM_Stop+0x50>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	f241 1311 	movw	r3, #4369	; 0x1111
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10f      	bne.n	8003254 <HAL_TIM_PWM_Stop+0x84>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	f240 4344 	movw	r3, #1092	; 0x444
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_TIM_PWM_Stop+0x84>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	f241 1311 	movw	r3, #4369	; 0x1111
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <HAL_TIM_PWM_Stop+0xb4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	f240 4344 	movw	r3, #1092	; 0x444
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_TIM_PWM_Stop+0xb4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_TIM_PWM_Stop+0xc4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003292:	e023      	b.n	80032dc <HAL_TIM_PWM_Stop+0x10c>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_PWM_Stop+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a2:	e01b      	b.n	80032dc <HAL_TIM_PWM_Stop+0x10c>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_PWM_Stop+0xe4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b2:	e013      	b.n	80032dc <HAL_TIM_PWM_Stop+0x10c>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d104      	bne.n	80032c4 <HAL_TIM_PWM_Stop+0xf4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c2:	e00b      	b.n	80032dc <HAL_TIM_PWM_Stop+0x10c>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_PWM_Stop+0x104>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d2:	e003      	b.n	80032dc <HAL_TIM_PWM_Stop+0x10c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40013400 	.word	0x40013400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014400 	.word	0x40014400
 80032f8:	40014800 	.word	0x40014800

080032fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0202 	mvn.w	r2, #2
 8003328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fae3 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fad5 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fae6 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0204 	mvn.w	r2, #4
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fab9 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 faab 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fabc 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa8f 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa81 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fa92 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b10      	cmp	r3, #16
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0210 	mvn.w	r2, #16
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2208      	movs	r2, #8
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa65 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa57 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa68 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10e      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0201 	mvn.w	r2, #1
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fc fea4 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 ff7c 	bl	80043a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 ff6f 	bl	80043b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d10e      	bne.n	8003506 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d107      	bne.n	8003506 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa16 	bl	8003932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d10e      	bne.n	8003532 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b20      	cmp	r3, #32
 8003520:	d107      	bne.n	8003532 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0220 	mvn.w	r2, #32
 800352a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 ff2f 	bl	8004390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003556:	2302      	movs	r3, #2
 8003558:	e0ff      	b.n	800375a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b14      	cmp	r3, #20
 8003566:	f200 80f0 	bhi.w	800374a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	080035c5 	.word	0x080035c5
 8003574:	0800374b 	.word	0x0800374b
 8003578:	0800374b 	.word	0x0800374b
 800357c:	0800374b 	.word	0x0800374b
 8003580:	08003605 	.word	0x08003605
 8003584:	0800374b 	.word	0x0800374b
 8003588:	0800374b 	.word	0x0800374b
 800358c:	0800374b 	.word	0x0800374b
 8003590:	08003647 	.word	0x08003647
 8003594:	0800374b 	.word	0x0800374b
 8003598:	0800374b 	.word	0x0800374b
 800359c:	0800374b 	.word	0x0800374b
 80035a0:	08003687 	.word	0x08003687
 80035a4:	0800374b 	.word	0x0800374b
 80035a8:	0800374b 	.word	0x0800374b
 80035ac:	0800374b 	.word	0x0800374b
 80035b0:	080036c9 	.word	0x080036c9
 80035b4:	0800374b 	.word	0x0800374b
 80035b8:	0800374b 	.word	0x0800374b
 80035bc:	0800374b 	.word	0x0800374b
 80035c0:	08003709 	.word	0x08003709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa4c 	bl	8003a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
      break;
 8003602:	e0a5      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fabc 	bl	8003b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6999      	ldr	r1, [r3, #24]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
      break;
 8003644:	e084      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fb25 	bl	8003c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0204 	bic.w	r2, r2, #4
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]
      break;
 8003684:	e064      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fb8d 	bl	8003dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	021a      	lsls	r2, r3, #8
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	61da      	str	r2, [r3, #28]
      break;
 80036c6:	e043      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fbd6 	bl	8003e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003706:	e023      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fc1a 	bl	8003f48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	021a      	lsls	r2, r3, #8
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003748:	e002      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
      break;
 800374e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIM_ConfigClockSource+0x1c>
 800377c:	2302      	movs	r3, #2
 800377e:	e0b6      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x18a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d03e      	beq.n	800383c <HAL_TIM_ConfigClockSource+0xd8>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	f200 8087 	bhi.w	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ca:	f000 8086 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x176>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d87f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b70      	cmp	r3, #112	; 0x70
 80037d6:	d01a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xaa>
 80037d8:	2b70      	cmp	r3, #112	; 0x70
 80037da:	d87b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d050      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x11e>
 80037e0:	2b60      	cmp	r3, #96	; 0x60
 80037e2:	d877      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d03c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xfe>
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d873      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d058      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x13e>
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d86f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d064      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f8:	2b30      	cmp	r3, #48	; 0x30
 80037fa:	d86b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d060      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d867      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003808:	2b10      	cmp	r3, #16
 800380a:	d05a      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15e>
 800380c:	e062      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f000 fc73 	bl	8004108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
      break;
 800383a:	e04f      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f000 fc5c 	bl	8004108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385e:	609a      	str	r2, [r3, #8]
      break;
 8003860:	e03c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	461a      	mov	r2, r3
 8003870:	f000 fbd0 	bl	8004014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2150      	movs	r1, #80	; 0x50
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fc29 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003880:	e02c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fbef 	bl	8004072 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2160      	movs	r1, #96	; 0x60
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fc19 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e01c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fbb0 	bl	8004014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fc09 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e00c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 fc00 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 80038d2:	e003      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e000      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <TIM_Base_SetConfig+0x104>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <TIM_Base_SetConfig+0x108>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x38>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <TIM_Base_SetConfig+0x10c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x38>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <TIM_Base_SetConfig+0x110>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <TIM_Base_SetConfig+0x104>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01b      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d017      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <TIM_Base_SetConfig+0x108>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <TIM_Base_SetConfig+0x10c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00f      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <TIM_Base_SetConfig+0x110>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <TIM_Base_SetConfig+0x118>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <TIM_Base_SetConfig+0x11c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <TIM_Base_SetConfig+0x104>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00f      	beq.n	8003a30 <TIM_Base_SetConfig+0xe8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <TIM_Base_SetConfig+0x110>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <TIM_Base_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0xe8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <TIM_Base_SetConfig+0x118>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0xe8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <TIM_Base_SetConfig+0x11c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40013400 	.word	0x40013400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f023 0302 	bic.w	r3, r3, #2
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <TIM_OC1_SetConfig+0x10c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x80>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <TIM_OC1_SetConfig+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x80>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <TIM_OC1_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x80>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <TIM_OC1_SetConfig+0x118>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x80>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <TIM_OC1_SetConfig+0x11c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0308 	bic.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <TIM_OC1_SetConfig+0x10c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00f      	beq.n	8003b2a <TIM_OC1_SetConfig+0xc2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <TIM_OC1_SetConfig+0x110>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_OC1_SetConfig+0xc2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <TIM_OC1_SetConfig+0x114>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <TIM_OC1_SetConfig+0xc2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <TIM_OC1_SetConfig+0x118>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_OC1_SetConfig+0xc2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <TIM_OC1_SetConfig+0x11c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d111      	bne.n	8003b4e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	621a      	str	r2, [r3, #32]
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0210 	bic.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0320 	bic.w	r3, r3, #32
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <TIM_OC2_SetConfig+0x100>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <TIM_OC2_SetConfig+0x104>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10d      	bne.n	8003c10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_OC2_SetConfig+0x100>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00f      	beq.n	8003c38 <TIM_OC2_SetConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <TIM_OC2_SetConfig+0x104>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_OC2_SetConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <TIM_OC2_SetConfig+0x108>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_OC2_SetConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <TIM_OC2_SetConfig+0x10c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_OC2_SetConfig+0xb0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <TIM_OC2_SetConfig+0x110>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d113      	bne.n	8003c60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40013400 	.word	0x40013400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800

08003c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a27      	ldr	r2, [pc, #156]	; (8003d98 <TIM_OC3_SetConfig+0xfc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_OC3_SetConfig+0x6a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM_OC3_SetConfig+0x100>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10d      	bne.n	8003d22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <TIM_OC3_SetConfig+0xfc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00f      	beq.n	8003d4a <TIM_OC3_SetConfig+0xae>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <TIM_OC3_SetConfig+0x100>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_OC3_SetConfig+0xae>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <TIM_OC3_SetConfig+0x104>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_OC3_SetConfig+0xae>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <TIM_OC3_SetConfig+0x108>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_OC3_SetConfig+0xae>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <TIM_OC3_SetConfig+0x10c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d113      	bne.n	8003d72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	621a      	str	r2, [r3, #32]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800

08003dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	031b      	lsls	r3, r3, #12
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <TIM_OC4_SetConfig+0xc0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00f      	beq.n	8003e30 <TIM_OC4_SetConfig+0x84>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC4_SetConfig+0xc4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <TIM_OC4_SetConfig+0x84>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_OC4_SetConfig+0xc8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <TIM_OC4_SetConfig+0x84>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <TIM_OC4_SetConfig+0xcc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_OC4_SetConfig+0x84>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <TIM_OC4_SetConfig+0xd0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d109      	bne.n	8003e44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	019b      	lsls	r3, r3, #6
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <TIM_OC5_SetConfig+0xb4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_OC5_SetConfig+0x7a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <TIM_OC5_SetConfig+0xb8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_OC5_SetConfig+0x7a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC5_SetConfig+0xbc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_OC5_SetConfig+0x7a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <TIM_OC5_SetConfig+0xc0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_OC5_SetConfig+0x7a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <TIM_OC5_SetConfig+0xc4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d109      	bne.n	8003f0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	621a      	str	r2, [r3, #32]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	051b      	lsls	r3, r3, #20
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a18      	ldr	r2, [pc, #96]	; (8004000 <TIM_OC6_SetConfig+0xb8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x7c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	; (8004004 <TIM_OC6_SetConfig+0xbc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x7c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <TIM_OC6_SetConfig+0xc0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x7c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a15      	ldr	r2, [pc, #84]	; (800400c <TIM_OC6_SetConfig+0xc4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x7c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a14      	ldr	r2, [pc, #80]	; (8004010 <TIM_OC6_SetConfig+0xc8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800

08004014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 030a 	bic.w	r3, r3, #10
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0210 	bic.w	r2, r3, #16
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800409c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f043 0307 	orr.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	431a      	orrs	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2201      	movs	r2, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	43db      	mvns	r3, r3
 800416a:	401a      	ands	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e063      	b.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d013      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a12      	ldr	r2, [pc, #72]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a13      	ldr	r2, [pc, #76]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10c      	bne.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40014000 	.word	0x40014000

08004294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e065      	b.n	800437c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d115      	bne.n	800436a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40013400 	.word	0x40013400

08004390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e040      	b.n	8004460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fbd6 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb86 	bl	8004b1c <UART_SetConfig>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e022      	b.n	8004460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fd4e 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fdd5 	bl	8005008 <UART_CheckIdleState>
 800445e:	4603      	mov	r3, r0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	2b20      	cmp	r3, #32
 800447c:	d147      	bne.n	800450e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Transmit_IT+0x22>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e040      	b.n	8004510 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c0:	d107      	bne.n	80044d2 <HAL_UART_Transmit_IT+0x6a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_UART_Transmit_IT+0xb4>)
 80044ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80044d0:	e002      	b.n	80044d8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_UART_Transmit_IT+0xb8>)
 80044d6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	69f9      	ldr	r1, [r7, #28]
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	61bb      	str	r3, [r7, #24]
   return(result);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e6      	bne.n	80044d8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	372c      	adds	r7, #44	; 0x2c
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	080053d3 	.word	0x080053d3
 8004520:	0800531b 	.word	0x0800531b

08004524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b0ba      	sub	sp, #232	; 0xe8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800454a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800454e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004552:	4013      	ands	r3, r2
 8004554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d115      	bne.n	800458c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 82ab 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
      }
      return;
 800458a:	e2a5      	b.n	8004ad8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800458c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8117 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_UART_IRQHandler+0x298>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 810a 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d011      	beq.n	80045e0 <HAL_UART_IRQHandler+0xbc>
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HAL_UART_IRQHandler+0xec>
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2202      	movs	r2, #2
 80045fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d011      	beq.n	8004640 <HAL_UART_IRQHandler+0x11c>
 800461c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2204      	movs	r2, #4
 800462e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d017      	beq.n	800467c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2208      	movs	r2, #8
 800466a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004672:	f043 0208 	orr.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004684:	2b00      	cmp	r3, #0
 8004686:	d012      	beq.n	80046ae <HAL_UART_IRQHandler+0x18a>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800469c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8211 	beq.w	8004adc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fd8d 	bl	8005226 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_UART_IRQHandler+0x29c>)
 8004774:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	4618      	mov	r0, r3
 800477c:	f7fc fcb2 	bl	80010e4 <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00f      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9aa 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00b      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9a6 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e007      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9a2 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047b4:	e192      	b.n	8004adc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b6:	bf00      	nop
    return;
 80047b8:	e190      	b.n	8004adc <HAL_UART_IRQHandler+0x5b8>
 80047ba:	bf00      	nop
 80047bc:	04000120 	.word	0x04000120
 80047c0:	080052ef 	.word	0x080052ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 814b 	bne.w	8004a64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8144 	beq.w	8004a64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 813d 	beq.w	8004a64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	f040 80b5 	bne.w	800496c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800480e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8164 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 815c 	bcs.w	8004ae0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b20      	cmp	r3, #32
 800483a:	f000 8086 	beq.w	800494a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800486c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1da      	bne.n	800483e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e1      	bne.n	8004888 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e3      	bne.n	80048c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800492c:	65bb      	str	r3, [r7, #88]	; 0x58
 800492e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e4      	bne.n	800490a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	4618      	mov	r0, r3
 8004946:	f7fc fb94 	bl	8001072 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8cd 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800496a:	e0b9      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80ab 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800498e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80a6 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
 80049bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e4      	bne.n	8004998 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	623b      	str	r3, [r7, #32]
   return(result);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e4      	bne.n	8004a1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f851 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a62:	e03f      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56a>
 8004a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fd2d 	bl	80054e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a8c:	e02d      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01c      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
    }
    return;
 8004ab6:	e017      	b.n	8004ae8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <HAL_UART_IRQHandler+0x5c6>
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fcde 	bl	8005492 <UART_EndTransmit_IT>
    return;
 8004ad6:	e008      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ad8:	bf00      	nop
 8004ada:	e006      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004adc:	bf00      	nop
 8004ade:	e004      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ae0:	bf00      	nop
 8004ae2:	e002      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ae8:	bf00      	nop
  }

}
 8004aea:	37e8      	adds	r7, #232	; 0xe8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b4a:	f023 030c 	bic.w	r3, r3, #12
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4aa7      	ldr	r2, [pc, #668]	; (8004e34 <UART_SetConfig+0x318>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0xc2>
 8004b9c:	4ba6      	ldr	r3, [pc, #664]	; (8004e38 <UART_SetConfig+0x31c>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d817      	bhi.n	8004bd8 <UART_SetConfig+0xbc>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x94>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004bc7 	.word	0x08004bc7
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e0b5      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e0b2      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e0af      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e0ac      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0a9      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a96      	ldr	r2, [pc, #600]	; (8004e3c <UART_SetConfig+0x320>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d124      	bne.n	8004c32 <UART_SetConfig+0x116>
 8004be8:	4b93      	ldr	r3, [pc, #588]	; (8004e38 <UART_SetConfig+0x31c>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf4:	d011      	beq.n	8004c1a <UART_SetConfig+0xfe>
 8004bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bfa:	d817      	bhi.n	8004c2c <UART_SetConfig+0x110>
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c00:	d011      	beq.n	8004c26 <UART_SetConfig+0x10a>
 8004c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c06:	d811      	bhi.n	8004c2c <UART_SetConfig+0x110>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <UART_SetConfig+0xf8>
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d006      	beq.n	8004c20 <UART_SetConfig+0x104>
 8004c12:	e00b      	b.n	8004c2c <UART_SetConfig+0x110>
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e08b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e088      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c20:	2304      	movs	r3, #4
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e085      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c26:	2308      	movs	r3, #8
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e082      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e07f      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a82      	ldr	r2, [pc, #520]	; (8004e40 <UART_SetConfig+0x324>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d124      	bne.n	8004c86 <UART_SetConfig+0x16a>
 8004c3c:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <UART_SetConfig+0x31c>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c48:	d011      	beq.n	8004c6e <UART_SetConfig+0x152>
 8004c4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c4e:	d817      	bhi.n	8004c80 <UART_SetConfig+0x164>
 8004c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c54:	d011      	beq.n	8004c7a <UART_SetConfig+0x15e>
 8004c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c5a:	d811      	bhi.n	8004c80 <UART_SetConfig+0x164>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x14c>
 8004c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c64:	d006      	beq.n	8004c74 <UART_SetConfig+0x158>
 8004c66:	e00b      	b.n	8004c80 <UART_SetConfig+0x164>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e061      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e05e      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e05b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e058      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e055      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <UART_SetConfig+0x328>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d124      	bne.n	8004cda <UART_SetConfig+0x1be>
 8004c90:	4b69      	ldr	r3, [pc, #420]	; (8004e38 <UART_SetConfig+0x31c>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9c:	d011      	beq.n	8004cc2 <UART_SetConfig+0x1a6>
 8004c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ca2:	d817      	bhi.n	8004cd4 <UART_SetConfig+0x1b8>
 8004ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca8:	d011      	beq.n	8004cce <UART_SetConfig+0x1b2>
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cae:	d811      	bhi.n	8004cd4 <UART_SetConfig+0x1b8>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <UART_SetConfig+0x1a0>
 8004cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb8:	d006      	beq.n	8004cc8 <UART_SetConfig+0x1ac>
 8004cba:	e00b      	b.n	8004cd4 <UART_SetConfig+0x1b8>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e037      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e034      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e031      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e02e      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e02b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5a      	ldr	r2, [pc, #360]	; (8004e48 <UART_SetConfig+0x32c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d124      	bne.n	8004d2e <UART_SetConfig+0x212>
 8004ce4:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <UART_SetConfig+0x31c>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf0:	d011      	beq.n	8004d16 <UART_SetConfig+0x1fa>
 8004cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf6:	d817      	bhi.n	8004d28 <UART_SetConfig+0x20c>
 8004cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfc:	d011      	beq.n	8004d22 <UART_SetConfig+0x206>
 8004cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d02:	d811      	bhi.n	8004d28 <UART_SetConfig+0x20c>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x1f4>
 8004d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0c:	d006      	beq.n	8004d1c <UART_SetConfig+0x200>
 8004d0e:	e00b      	b.n	8004d28 <UART_SetConfig+0x20c>
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e00a      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e007      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e004      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e001      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d15b      	bne.n	8004df4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d827      	bhi.n	8004d92 <UART_SetConfig+0x276>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x22c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	08004d83 	.word	0x08004d83
 8004d5c:	08004d93 	.word	0x08004d93
 8004d60:	08004d93 	.word	0x08004d93
 8004d64:	08004d93 	.word	0x08004d93
 8004d68:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fd fdea 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 8004d70:	61b8      	str	r0, [r7, #24]
        break;
 8004d72:	e013      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7fd fe08 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d7c:	4b33      	ldr	r3, [pc, #204]	; (8004e4c <UART_SetConfig+0x330>)
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e00c      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7fd fd69 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8004d86:	61b8      	str	r0, [r7, #24]
        break;
 8004d88:	e008      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e004      	b.n	8004d9c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8082 	beq.w	8004ea8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d916      	bls.n	8004dee <UART_SetConfig+0x2d2>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d212      	bcs.n	8004dee <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f023 030f 	bic.w	r3, r3, #15
 8004dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	89fa      	ldrh	r2, [r7, #14]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e05c      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	77bb      	strb	r3, [r7, #30]
 8004df2:	e059      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d835      	bhi.n	8004e66 <UART_SetConfig+0x34a>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x2e4>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e67 	.word	0x08004e67
 8004e10:	08004e57 	.word	0x08004e57
 8004e14:	08004e67 	.word	0x08004e67
 8004e18:	08004e67 	.word	0x08004e67
 8004e1c:	08004e67 	.word	0x08004e67
 8004e20:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fd8e 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e021      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd fdac 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e01d      	b.n	8004e70 <UART_SetConfig+0x354>
 8004e34:	40013800 	.word	0x40013800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40004800 	.word	0x40004800
 8004e44:	40004c00 	.word	0x40004c00
 8004e48:	40005000 	.word	0x40005000
 8004e4c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <UART_SetConfig+0x3a4>)
 8004e52:	61bb      	str	r3, [r7, #24]
        break;
 8004e54:	e00c      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fd fcff 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61b8      	str	r0, [r7, #24]
        break;
 8004e5c:	e008      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	61bb      	str	r3, [r7, #24]
        break;
 8004e64:	e004      	b.n	8004e70 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085a      	lsrs	r2, r3, #1
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d909      	bls.n	8004ea4 <UART_SetConfig+0x388>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d205      	bcs.n	8004ea4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	e001      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	; 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fb ff0e 	bl	8000e38 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12e      	bne.n	800508a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d021      	beq.n	800508a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e062      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d149      	bne.n	800512c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f856 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	617b      	str	r3, [r7, #20]
   return(result);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3758      	adds	r7, #88	; 0x58
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e049      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d045      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fb fe61 	bl	8000e38 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e048      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d110      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f838 	bl	8005226 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2208      	movs	r2, #8
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e029      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d111      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f81e 	bl	8005226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e00f      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	429a      	cmp	r2, r3
 800521a:	d0a6      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b095      	sub	sp, #84	; 0x54
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524c:	643b      	str	r3, [r7, #64]	; 0x40
 800524e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e6      	bne.n	800522e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	64bb      	str	r3, [r7, #72]	; 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	2b01      	cmp	r3, #1
 800529a:	d118      	bne.n	80052ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0310 	bic.w	r3, r3, #16
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	613b      	str	r3, [r7, #16]
   return(result);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052e2:	bf00      	nop
 80052e4:	3754      	adds	r7, #84	; 0x54
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fbef 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800531a:	b480      	push	{r7}
 800531c:	b08f      	sub	sp, #60	; 0x3c
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	2b21      	cmp	r3, #33	; 0x21
 8005328:	d14d      	bne.n	80053c6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d132      	bne.n	800539c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	61fb      	str	r3, [r7, #28]
   return(result);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005356:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	60bb      	str	r3, [r7, #8]
   return(result);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800539a:	e014      	b.n	80053c6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b292      	uxth	r2, r2
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80053c6:	bf00      	nop
 80053c8:	373c      	adds	r7, #60	; 0x3c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b091      	sub	sp, #68	; 0x44
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	2b21      	cmp	r3, #33	; 0x21
 80053e0:	d151      	bne.n	8005486 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d132      	bne.n	8005454 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	623b      	str	r3, [r7, #32]
   return(result);
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
 800540e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	60fb      	str	r3, [r7, #12]
   return(result);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	69b9      	ldr	r1, [r7, #24]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	617b      	str	r3, [r7, #20]
   return(result);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e6      	bne.n	8005420 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005452:	e018      	b.n	8005486 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005466:	b292      	uxth	r2, r2
 8005468:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005486:	bf00      	nop
 8005488:	3744      	adds	r7, #68	; 0x44
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b088      	sub	sp, #32
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fa ff53 	bl	8000384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 f820 	bl	8005554 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	080055a4 	.word	0x080055a4
 8005538:	080055a4 	.word	0x080055a4
 800553c:	080055a4 	.word	0x080055a4
 8005540:	080055a8 	.word	0x080055a8

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <_init>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr

08005560 <_fini>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr
